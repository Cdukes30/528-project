# -*- coding: utf-8 -*-
"""Pose_model_fixed-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-xbWjYLwsWjBHhiq9prSEOfxG8Vq5IlI
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install mediapipe opencv-python pandas scikit-learn

import mediapipe as mp
import cv2
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

landmarks=['class']
for val in range(1,33+1):
    landmarks+= ['x{}'.format(val), 'y{}'.format(val),'z{}'.format(val), 'v{}'.format(val)]

mp_pose = mp.solutions.pose

# Setup the Pose function for images - independently for the images standalone processing.
pose_image = mp_pose.Pose(static_image_mode=True, min_detection_confidence=0.5)

# Setup the Pose function for videos - for video processing.
pose_video = mp_pose.Pose(static_image_mode=False, min_detection_confidence=0.7,
                          min_tracking_confidence=0.7)

# Initialize mediapipe drawing class - to draw the landmarks points.
mp_drawing = mp.solutions.drawing_utils

df = pd.read_csv('fitpose (2).csv')

df.head()

y=df['class']
X = df.drop(['class'], axis=1)
X

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=.2, random_state=42)



from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression, RidgeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier

pipelines = {
    'lr':make_pipeline(StandardScaler(), LogisticRegression()),
    'rc':make_pipeline(StandardScaler(), RidgeClassifier()),
    'rf': make_pipeline(StandardScaler(), RandomForestClassifier()),
    'gb': make_pipeline(StandardScaler(), GradientBoostingClassifier()),
}

fit_models = {}
for algo, pipeline in pipelines.items():
    model = pipeline.fit(X_train,y_train)
    fit_models[algo] = model

fit_models

fit_models['rc'].predict(X_test)

from sklearn.metrics import accuracy_score, precision_score, recall_score
import pickle

for algo, model in fit_models.items():
    yhat= model.predict(X_test)
    print(algo, accuracy_score(y_test.values,yhat),
        precision_score(y_test.values, yhat,average='binary', pos_label="Up"),
        recall_score(y_test.values, yhat, average='binary', pos_label="Up"))

yhat=fit_models['rf'].predict(X_test)

yhat[:10]

with open('Squat.pkl', 'wb') as f:
    pickle.dump(fit_models['rf'],f)

with open('Squat.pkl', 'rb') as f:
    model = pickle.load(f)

mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
mp_holistic = mp.solutions.holistic
mp_pose= mp.solutions.pose

#cap.release()
#cv2.destroyAllWindows()

cap = cv2.VideoCapture(0)
counter=0
current_stage=''
with mp_pose.Pose(min_detection_confidence=.5,min_tracking_confidence=.5) as pose:

    while cap.isOpened():
        ret, frame = cap.read()

        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False
        results = pose.process(image)

        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                              mp_drawing.DrawingSpec(color=(245,117,66), thickness=2, circle_radius=4),
                               mp_drawing.DrawingSpec(color=(245,88,130), thickness=2, circle_radius=3))
    
        try:
            row=np.array([[res.x,res.y,res.z,res.visibility] for res in results.pose_landmarks.landmark]).flatten().tolist()
            X= pd.DataFrame([row], columns=landmarks[1:])
            body_language_class= model.predict(X)[0]
            body_language_prob=model.predict_proba(X)[0]
            print(body_language_class,body_language_prob)

            if body_language_class=='Up' and body_language_prob[body_language_prob.argmax()]>=.7:
                current_stage='Up'
            elif current_stage=='Up' and body_language_prob[body_language_prob.argmax()]<.7:
                current_stage=='Down'
                counter +=1
                print(current_stage)


            cv2.rectangle(image, (0,0), (250,60), (245,117,16), -1)
        
        # Rep data
            cv2.putText(image, 'Class'  
                       ,(95,12), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,0), 1, cv2.LINE_AA)
            cv2.putText(image, body_language_class.split(' ')[0],
                    (90,40), cv2.FONT_HERSHEY_COMPLEX,1,(255,255,255),2,cv2.LINE_AA)
       
            cv2.putText(image, 'Prob', 
                    (15,12), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,0), 1, cv2.LINE_AA),
            cv2.putText(image, str(round(body_language_prob[np.argmax(body_language_prob)],2)),
                    (10,40), cv2.FONT_HERSHEY_COMPLEX,1,(255,255,255),2,cv2.LINE_AA)
        
        # Stage data
            cv2.putText(image, 'Count',
                  cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,0), 1, cv2.LINE_AA)
            cv2.putText(image, str(counter), 
                    (175,40), cv2.FONT_HERSHEY_COMPLEX,1,(255,255,255),2,cv2.LINE_AA)
      
        except Exception as e:
            pass

        cv2.imshow('Raw Webcam Feed', image)
     

        if cv2.waitKey(10) & 0xFF == ord('q'):
            break
cap.release()
cv2.destroyAllWindows()

"""27"""

